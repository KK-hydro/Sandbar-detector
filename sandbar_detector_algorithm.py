# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SandbarDetector
                                 A QGIS plugin
 Sandbar Detector
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-01-14
        copyright            : (C) 2024 by Klaudia Kryniecka
        email                : klaudia.kryniecka@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Klaudia Kryniecka'
__date__ = '2024-01-14'
__copyright__ = '(C) 2024 by Klaudia Kryniecka'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterFeatureSink
                       )
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
import processing


class SandbarDetectorAlgorithm(QgsProcessingAlgorithm):
    """
   This is an algorithm created for the purpose of 
   distinguishing land from water. It uses the 
   Sentinel Water Mask (SWM ) remote sensing index 
   (Robak 2016) and a proprietary method for vectorizing channel forms.
   Its output is a vector layer.  

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    B2_REF = 'B2'
    B3_REF = 'B3'
    B8_REF = 'B8'
    B11_REF = 'B11'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.B2_REF,
                self.tr('B2:'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.B3_REF,
                self.tr('B3:'),
                optional=False
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.B8_REF,
                self.tr('B8:'),
                optional=False
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.B11_REF,
                self.tr('B11:'),
                optional=False
            )
        )
        
        # We add the raster features source to output the vector
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output vector destination')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place. 
        """
        feedback.setProgress(0)
        output_file = self.parameterAsOutputLayer(
            parameters, self.OUTPUT, context)

        inputB2RasterLayer = self.parameterAsRasterLayer(
            parameters, self.B2_REF, context)
        inputB3RasterLayer = self.parameterAsRasterLayer(
            parameters, self.B3_REF, context)
        inputB8RasterLayer = self.parameterAsRasterLayer(
            parameters, self.B8_REF, context)
        inputB11RasterLayer = self.parameterAsRasterLayer(
            parameters, self.B11_REF, context)

        entryB2 = QgsRasterCalculatorEntry()
        entryB2.raster = inputB2RasterLayer
        entryB2.ref = 'B2@1'
        entryB2.bandNumber = inputB2RasterLayer.bandCount()

        entryB3 = QgsRasterCalculatorEntry()
        entryB3.raster = inputB3RasterLayer
        entryB3.ref = 'B3@1'
        entryB3.bandNumber = inputB3RasterLayer.bandCount()

        entryB8 = QgsRasterCalculatorEntry()
        entryB8.raster = inputB8RasterLayer
        entryB8.ref = 'B8@1'
        entryB8.bandNumber = inputB8RasterLayer.bandCount()

        entryB11 = QgsRasterCalculatorEntry()
        entryB11.raster = inputB11RasterLayer
        entryB11.ref = 'B11@1'
        entryB11.bandNumber = inputB11RasterLayer.bandCount()

        entries = [entryB2, entryB3, entryB8, entryB11]
        tramsform_context = QgsProject.instance().transformContext()
        #Generate the tiff file name for calculator output
        transform_output = output_file.rsplit('.', 1)[0] + ".tiff"
        calc = QgsRasterCalculator('((B2@1 + B3@1)/(B8@1 + B11@1)) < 0.957', transform_output, 'GTiff', inputB2RasterLayer.extent(
        ), inputB2RasterLayer.width(), inputB2RasterLayer.height(), entries, tramsform_context)
        result = calc.processCalculation()
        feedback.setProgress(75)
        parameters = {
            'INPUT': transform_output,
            'BAND': 1,
            'OUTPUT': output_file
        }
        """
            Making vector layer.
        """
        processing.run("gdal:polygonize", parameters)
        feedback.setProgress(100)
        
        return {self.OUTPUT: output_file}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Sandbar algorithm'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Algorithm to detect sandbar'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SandbarDetectorAlgorithm()
